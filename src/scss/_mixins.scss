// Helpers
// -----------------------------------------------------------------------------

// Utilities
// -----------------------------------------------------------------------------

// Establishes baseline by setting root element line-height. Also sets base
// font-size.
//
@mixin establish-baseline {
	html {
		font-size: 100% * ($base-font-size / 16px);
		line-height: px($base-line-height) / px($base-font-size);
	}
}

// Components
// -----------------------------------------------------------------------------

@mixin button-base() {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	height: baseline(height(button));
	margin: 0;
	padding: baseline(0 height(button) / 2);
	border: border-width(button) solid transparent;
	border-radius: border-radius(button);
	font-family: inherit;
	font-size: font-size(0);
	// font-weight: font-weight(body);
	// line-height: baseline('#{height(button)}:-#{border-width(button) * 2}');
	vertical-align: middle;
	cursor: pointer;
	&:hover {
		text-decoration: none;
	}
	&:disabled, &--disabled {
		background-color: transparent;
		color: color('text-tertiary');
		cursor: default;
		pointer-events: none;
	}
}
@mixin button-color-variant($background, $background-hover: $background, $background-active: $background, $text: color-yiq($background), $text-hover: $text, $text-active: $text) {
	background-color: $background;
	color: $text;
	&:focus, &:hover {
		background-color: $background-hover;
		color: $text-hover;
	}
	&:active {
		background-color: $background-active;
		color: $text-active;
	}
	&.button--outlined {
		border-color: $background;
		background-color: transparent;
		color: $background;
		&:focus, &:hover {
			border-color: transparent;
			background-color: $background;
			color: $text;
		}
		&:active {
			border-color: transparent;
			background-color: $background-active;
			color: $text-active;
		}
	}
	&.button--text {
		background-color: transparent;
		color: $background;
		&:focus, &:hover {
			background-color: rgba($background, 0.12);
			color: $background;
		}
		&:active {
			background-color: rgba($background, 0.26);
			color: $background;
		}
	}
}

// Skins
// -----------------------------------------------------------------------------

// Layout
// -----------------------------------------------------------------------------

// Media Query mixin
//
// @param {String | Boolean} $from (false) - One of $breakpoints-data
//
// @param {String | Boolean} $until (false) - One of $breakpoints-data
//
// @param {String | Boolean} $and (false) - Additional media query parameters
//
// @param {String} $media-type ($media-type) - Media type: screen, printâ€¦
//
// @ignore Undocumented API, for advanced use only:
// @ignore @param {Map} $breakpoints-data ($breakpoints-data)
//
// @content styling rules, wrapped into a @media query when $responsive is true
//
// @requires {function} convert-length
// @requires {function} breakpoint
//
// @example scss
//  .element {
//    @include media-query($from: mobile) {
//      color: red;
//    }
//    @include media-query($until: tablet) {
//      color: blue;
//    }
//    @include media-query(mobile, tablet) {
//      color: green;
//    }
//    @include media-query($from: tablet, $and: '(orientation: landscape)') {
//      color: teal;
//    }
//    @include media-query(950px) {
//      color: hotpink;
//    }
//    @include media-query(tablet, $media-type: screen) {
//      color: hotpink;
//    }
//  }
@mixin media-query($from: false, $until: false, $and: false, $media-type: all, $unit: $media-query-unit) {

	$min-width: 0;
	$max-width: 0;
	$media-query: '';

	@if $from {
		@if type-of($from) == number {
			$min-width: convert-length($from, $unit);
		} @else {
			$min-width: convert-length(breakpoint($from), $unit);
		}
	}

	@if $until {
		@if type-of($until) == number {
			$max-width: convert-length($until, $unit);
		} @else {
			$o: if($unit == px, 0.01px, convert-length(0.01em, $unit));
			$max-width: convert-length(breakpoint($until), $unit) - $o;
		}
	}

	@if $min-width != 0 {
		$media-query: '#{$media-query} and (min-width: #{$min-width})';
	}
	@if $max-width != 0 {
		$media-query: '#{$media-query} and (max-width: #{$max-width})';
	}
	@if $and {
		$media-query: '#{$media-query} and #{$and}';
	}

	// Remove unnecessary media query prefix 'all and '
	@if ($media-type == all and $media-query != '') {
		$media-type: '';
		$media-query: str-slice(unquote($media-query), 6);
	}
	@media #{$media-type + $media-query} {
		@content;
	}
}

// Quick clearfix hack.
//
@mixin clearfix {
	&::before, &::after {
		content: '';
		display: table;
	}
	&::after {
		clear: both;
	}
}
